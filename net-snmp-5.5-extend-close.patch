Bug 1188295 - net-snmp snmpd fork() overhead [fix available]

Backported from:

commit f0e87f4918ffc41e03f707e9670ea422cd154a9b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Sat Jan 31 12:05:24 2015 +0100

    CHANGES: snmpd: BUG: 2596: Reduce fork() overhead

    Avoid that the close() loop that is executed after a fork() delays
    the pass/extend API on systems with a large maximum number of files
    by reducing the number of iterations of this loop on Linux systems.

    See also http://sourceforge.net/p/net-snmp/bugs/2596.

    Reported-by: andymf <andymf@users.sf.net>

diff -up net-snmp-5.5/agent/mibgroup/util_funcs.c.extend-close net-snmp-5.5/agent/mibgroup/util_funcs.c
--- net-snmp-5.5/agent/mibgroup/util_funcs.c.extend-close	2015-02-27 12:29:19.826128168 +0100
+++ net-snmp-5.5/agent/mibgroup/util_funcs.c	2015-02-27 12:29:20.054129131 +0100
@@ -488,8 +488,7 @@ get_exec_pipes(char *cmd, int *fdIn, int
         /*
          * close all non-standard open file descriptors 
          */
-        for (cnt = getdtablesize() - 1; cnt >= 2; --cnt)
-            (void) close(cnt);
+        netsnmp_close_fds(1);
         (void) dup(1);          /* stderr */
 
         for (cnt = 1, cptr1 = cmd, cptr2 = argvs; *cptr1 != 0;
diff -up net-snmp-5.5/agent/mibgroup/utilities/execute.c.extend-close net-snmp-5.5/agent/mibgroup/utilities/execute.c
--- net-snmp-5.5/agent/mibgroup/utilities/execute.c.extend-close	2009-05-06 23:45:20.000000000 +0200
+++ net-snmp-5.5/agent/mibgroup/utilities/execute.c	2015-02-27 12:29:54.609275035 +0100
@@ -22,6 +22,9 @@
 #if HAVE_FCNTL_H
 #include <fcntl.h>
 #endif
+#if HAVE_DIRENT_H
+#include <dirent.h>
+#endif
 #if HAVE_SYS_WAIT_H
 #include <sys/wait.h>
 #endif
@@ -36,6 +39,7 @@
 #include <ucd-snmp/errormib.h>
 
 #include "util_funcs.h"
+#include "execute.h"
 
 #define setPerrorstatus(x) snmp_log_perror(x)
 
@@ -255,8 +259,8 @@ run_exec_command( char *command, char *i
         close(opipe[0]);
         close(2);
         dup(1);
-        for (i = getdtablesize()-1; i>2; i--)
-            close(i);
+
+        netsnmp_close_fds(2);
 
         /*
          * Set up the argv array and execute it
@@ -454,3 +458,30 @@ run_exec_command( char *command, char *i
     return run_shell_command( command, input, output, out_len );
 #endif
 }
+
+/**
+ * Close all file descriptors larger than @fd.
+ */
+void netsnmp_close_fds(int fd)
+{
+#if defined(HAVE_FORK)
+    DIR            *dir;
+    struct dirent  *ent;
+    int             i, largest_fd = -1;
+
+    if ((dir = opendir("/proc/self/fd"))) {
+        while ((ent = readdir(dir))) {
+            if (sscanf(ent->d_name, "%d", &i) == 1) {
+                if (i > largest_fd)
+                    largest_fd = i;
+            }
+        }
+        closedir(dir);
+    } else {
+        largest_fd = getdtablesize() - 1;
+    }
+
+    for (i = largest_fd; i > fd; i--)
+        close(i);
+#endif
+}
diff -up net-snmp-5.5/agent/mibgroup/utilities/execute.h.extend-close net-snmp-5.5/agent/mibgroup/utilities/execute.h
--- net-snmp-5.5/agent/mibgroup/utilities/execute.h.extend-close	2004-08-12 14:20:29.000000000 +0200
+++ net-snmp-5.5/agent/mibgroup/utilities/execute.h	2015-02-27 12:29:20.054129131 +0100
@@ -4,6 +4,7 @@
 config_require(util_funcs)
 config_belongs_in(agent_module)
 
+void netsnmp_close_fds(int fd);
 int run_shell_command(char *command, char *input,
                       char *output,  int  *out_len);
 int run_exec_command( char *command, char *input,
diff -up net-snmp-5.5/agent/snmpd.c.extend-close net-snmp-5.5/agent/snmpd.c
--- net-snmp-5.5/agent/snmpd.c.extend-close	2015-02-27 12:29:19.848128261 +0100
+++ net-snmp-5.5/agent/snmpd.c	2015-02-27 12:29:20.055129135 +0100
@@ -143,6 +143,7 @@ typedef long    fd_mask;
 #include "m2m.h"
 #include <net-snmp/agent/mib_module_config.h>
 
+#include "utilities/execute.h" /* netsnmp_close_fds() */
 #include "snmpd.h"
 #include "mibgroup/struct.h"
 #include <net-snmp/agent/mib_modules.h>
@@ -438,15 +439,11 @@ main(int argc, char *argv[])
     const char     *persistent_dir;
 #endif
 
-#ifndef WIN32
     /*
      * close all non-standard file descriptors we may have
      * inherited from the shell.
      */
-    for (i = getdtablesize() - 1; i > 2; --i) {
-        (void) close(i);
-    }
-#endif /* #WIN32 */
+    netsnmp_close_fds(2);
     
     /*
      * register signals ASAP to prevent default action (usually core)
diff -up net-snmp-5.5/apps/snmptrapd.c.extend-close net-snmp-5.5/apps/snmptrapd.c
--- net-snmp-5.5/apps/snmptrapd.c.extend-close	2015-02-27 12:29:19.923128578 +0100
+++ net-snmp-5.5/apps/snmptrapd.c	2015-02-27 12:29:20.055129135 +0100
@@ -99,6 +99,7 @@ SOFTWARE.
 #include <net-snmp/net-snmp-includes.h>
 #include <net-snmp/agent/net-snmp-agent-includes.h>
 #include <net-snmp/library/fd_event_manager.h>
+#include "utilities/execute.h" /* netsnmp_close_fds() */
 #include "snmptrapd_handlers.h"
 #include "snmptrapd_log.h"
 #include "snmptrapd_auth.h"
@@ -597,15 +598,11 @@ main(int argc, char *argv[])
 #endif
 
 
-#ifndef WIN32
     /*
      * close all non-standard file descriptors we may have
      * inherited from the shell.
      */
-    for (i = getdtablesize() - 1; i > 2; --i) {
-        (void) close(i);
-    }
-#endif /* #WIN32 */
+    netsnmp_close_fds(2);
     
 #ifdef SIGTERM
     signal(SIGTERM, term_handler);
@@ -1335,18 +1332,6 @@ trapd_update_config(void)
     read_configs();
 }
 
-
-#if !defined(HAVE_GETDTABLESIZE) && !defined(WIN32)
-#include <sys/resource.h>
-int
-getdtablesize(void)
-{
-    struct rlimit   rl;
-    getrlimit(RLIMIT_NOFILE, &rl);
-    return (rl.rlim_cur);
-}
-#endif
-
 /*
  * Windows Service Related functions 
  */
