736580 - snmpd memory leak when AgentX subagent disconnects while processing a request

commit f9304c83f76202db0e684269ca1af32e43cd9db4
Author: Jan Safranek <jsafranek@users.sourceforge.net>
Date:   Tue Feb 7 14:53:44 2012 +0100

    CHANGES: PATCH 1633670: fixed snmpd crashing when an AgentX subagent disconnect in the middle of processing of a request.
            I fixed also the memory leak reported in the tracker comments.

diff --git a/agent/mibgroup/agentx/master.c b/agent/mibgroup/agentx/master.c
index 05f148f..83cba7b 100644
--- a/agent/mibgroup/agentx/master.c
+++ b/agent/mibgroup/agentx/master.c
@@ -217,6 +217,9 @@ agentx_got_response(int operation,
     if (!cache) {
         DEBUGMSGTL(("agentx/master", "response too late on session %8p\n",
                     session));
+        /* response is too late, free the cache */
+        if (magic)
+            netsnmp_free_delegated_cache((netsnmp_delegated_cache*)magic);
         return 0;
     }
     requests = cache->requests;
@@ -602,6 +605,8 @@ agentx_master_handler(netsnmp_mib_handler *handler,
     result = snmp_async_send(ax_session, pdu, agentx_got_response, cb_data);
     if (result == 0) {
         snmp_free_pdu(pdu);
+        if (cb_data)
+            netsnmp_free_delegated_cache((netsnmp_delegated_cache*) cb_data);
     }
 
     return SNMP_ERR_NOERROR;
commit 14cafce72858e88d499f413d314b4b8734540f13
Author: Dave Shield <dts12@users.sourceforge.net>
Date:   Fri Jan 7 13:21:48 2011 +0000

    Avoid callback re-use of closed sessions.
    (Part of patch #2975254 - see SVN revision 19808)
    
    
    git-svn-id: file:///home/hardaker/lib/sf-bkups/net-snmp-convert-svnrepo/trunk@19812 06827809-a52a-0410-b366-d66718629ded

diff --git a/snmplib/snmp_api.c b/snmplib/snmp_api.c
index 24387d3..89cc2d8 100644
--- a/snmplib/snmp_api.c
+++ b/snmplib/snmp_api.c
@@ -2103,6 +2103,11 @@ snmp_sess_close(void *sessp)
         while (rp) {
             orp = rp;
             rp = rp->next_request;
+            if (orp->callback) {
+                orp->callback(NETSNMP_CALLBACK_OP_TIMED_OUT,
+                              slp->session, orp->pdu->reqid,
+                              orp->pdu, orp->cb_data);
+            }
             snmp_free_pdu(orp->pdu);
             free((char *) orp);
         }
